A4
Data Analytics I
Create a Linear Regression Model using Python/R to predict home prices using Boston Housing
Dataset (https://www.kaggle.com/c/boston-housing). The Boston Housing dataset contains
information about various houses in Boston through different parameters. There are 506 samples
and 14 feature variables in this dataset.
The objective is to predict the value of prices of the house using the given features.
________________________________________________________________________________________________________________________________________________

//IMPORT LIBRARIES

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_boston
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error
from sklearn.preprocessing import StandardScaler
import warnings
warnings.filterwarnings("ignore")
%matplotlib inline
 
boston = load_boston()
boston.keys()
 
x = pd.DataFrame(boston.data, columns=boston.feature_names)
y = pd.DataFrame(boston.target, columns=['MEDV'])
x.head()
 
x.shape ,y.shape

//BASIC STATS
 
x.info()
 
x.describe()
 
y.info()
 
y.describe()
 
x.isnull().sum()
 
y.isnull().sum()
 
df = x 
df["target"] = y
df.head()
 
plt.figure(figsize=(15,10))
sns.heatmap(df.corr(), annot=True)
plt.show()

//Considering only 'RM' and 'LSTAT' by considering correlation and multi-collinearity of other features
 
df = df[['RM', 'LSTAT', 'target']]
 
sns.pairplot(df)
plt.show()
 
x = df[['RM', 'LSTAT']]
y = df['target']

//SCALE THE DATA
 
scaler = StandardScaler()
 
x = scaler.fit_transform(x)

//SPLIT THE DATA
 
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, shuffle=True)
 
x_train.shape, x_test.shape, y_train.shape, y_test.shape

//LINEAR REGRESSION MODELING
 
model = LinearRegression(n_jobs=-1)
 
model.fit(x_train, y_train)

//MAKE PREDECTIONS
 
y_pred = model.predict(x_test)
 
mean_absolute_error(y_test, y_pred)
 
mean_squared_error(y_test, y_pred)
 
sns.regplot(y_test, y_pred, color='red')
plt.show()