A3
Descriptive Statistics - Measures of Central Tendency and variability
Perform the following operations on any open source dataset (e.g., data.csv)
1. Provide summary statistics (mean, median, minimum, maximum, standard deviation) for
a dataset (age, income etc.) with numeric variables grouped by one of the qualitative
(categorical) variable. For example, if your categorical variable is age groups and
quantitative variable is income, then provide summary statistics of income grouped by the
age groups. Create a list that contains a numeric value for each response to the categorical
variable.
2. Write a Python program to display some basic statistical details like percentile, mean,
standard deviation etc. of the species of ‘Iris-setosa’, ‘Iris-versicolor’ and ‘Iris-versicolor’
of iris.csv dataset.
Provide the codes with outputs and explain everything that you do in this step
___________________________________________________________________________________________________________________________________________________

//IMPORT LIBRARIES

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings 
warnings.filterwarnings("ignore")
from sklearn.datasets import load_iris
%matplotlib inline
 
#the dataset may change , and change the variables accordingly
df = pd.read_csv("loan_data_set.csv")
 
df.head()
 
//BASIC STATS

df.shape
 
df.info()
 
df.describe()
 
df.isna().sum()
 
df["ApplicantIncome"].plot(kind="hist")
plt.show()
 
df["ApplicantIncome"].fillna(df["ApplicantIncome"].mean(), inplace=True)
 
df["CoapplicantIncome"].plot(kind="hist")
plt.show()
 
 
df["CoapplicantIncome"].fillna(df["CoapplicantIncome"].mean(), inplace=True)
 
 
df["LoanAmount"].plot(kind="hist")
plt.show()
 
 
df["LoanAmount"].fillna(df["LoanAmount"].mean(), inplace=True)
 
df["Credit_History"].plot(kind="hist")
plt.show()
 
df["Credit_History"].fillna(np.random.randint(0,2), inplace=True)
 
grouped_df = df[["ApplicantIncome", "CoapplicantIncome", "LoanAmount", "Credit_History"]].groupby(df["Loan_Status"])
 
//STATS OF THE GROUPED DATA
 
mean = grouped_df.mean()
mean
 
median = grouped_df.median()
median
 
min = grouped_df.min()
min
 
max = grouped_df.max()
max
 
std = grouped_df.std()
std
 
//IRIS DATA

iris = load_iris()
iris.keys()
 
iris_df = pd.DataFrame(iris.data, columns = iris.feature_names)
iris_df["label"] = iris.target
 
 
iris.target_names
 
 
iris_df.shape
 
iris_df.head()

//BASIC STATS
 
iris_df.info()
 
iris_df.describe()

//SETOSA STATS
 
setosa = iris_df[iris_df["label"] == 0].drop("label", axis=1)
 
setosa.describe()
 
plt.figure(figsize=(10,7))
box = setosa.boxplot()
medians = setosa.median()
for i in range(len(medians)):
    box.annotate(medians[i], (i+1, medians[i]), ha="center", va="center", color="red", size=10)
plt.show()
 
//VERSICOLOR STATS
 
versicolor = iris_df[iris_df["label"] == 1].drop("label", axis=1)
 
versicolor.describe()
 
plt.figure(figsize=(10,7))
box = versicolor.boxplot()
medians = versicolor.median()
for i in range(len(medians)):
    box.annotate(medians[i], (i+1, medians[i]), ha="center", va="center", color="red", size=10)
plt.show()
 
//VIRGINICA STATS 

virginica = iris_df[iris_df["label"] == 2].drop("label", axis=1)
 
virginica.describe()
 
plt.figure(figsize=(10,7))
box = virginica.boxplot()
medians = virginica.median()
for i in range(len(medians)):
    box.annotate(medians[i], (i+1, medians[i]), ha="center", va="center", color="red", size=10)
plt.show()